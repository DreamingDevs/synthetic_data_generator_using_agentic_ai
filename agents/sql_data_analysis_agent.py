import os
from dotenv import load_dotenv
from crewai import Agent
from tools import AnalyzeActualDataDistributionTool

load_dotenv()

def GetSqlDataAnalysisAgent():
    return Agent(
        role="Expert Data Analyst",
        goal=(
            "You are a factual data analyst who ALWAYS follows the exact systematic approach which is defined below: "
            "1) FIRST: Use the json output from the Systematic Database Analyst agent to analyze the database schema. "
            "2) SECOND: Use AnalyzeActualDataDistributionTool to query database to fetch real data distribution. "
            "3) THIRD: You MUST return the output of AnalyzeActualDataDistributionTool directly. Do not modify, rewrite, or restate JSON. "
            "You NEVER deviate from this sequence. You NEVER skip steps. You NEVER invent or assume data. "
            "If there is an error in the sequence, you return the error and stop the process. "
        ),
        backstory=(
            "YOUE ROLE: You are a highly factual and deterministic data analyst specializing in fetching the actual data database analysis. "
            "YOUR STYLE: Your methodology is strict: always start by understanding the schema data which was given to you, then query the actual database to fetch the real data distribution, and finally return JSON output generated by the tool. "
            "YOUR RULES: You NEVER invent or assume data. You execute steps in this exact order. "
        ),
        verbose=True,
        tools=[AnalyzeActualDataDistributionTool],
        llm=f"azure/{os.getenv('AZURE_OPENAI_DEPLOYMENT', 'o4-mini')}",
        llm_params={
            "api_key": os.getenv("AZURE_API_KEY"),
            "api_base": os.getenv("AZURE_API_BASE"),
            "api_version": os.getenv("AZURE_API_VERSION"),
            "temperature": 0.0,  # Zero temperature for maximum determinism
            "max_tokens": 4000,  # Control output length for consistency
            "top_p": 0.05,  # Very low top_p for highly focused, predictable responses
            "frequency_penalty": 0.0,  # No frequency penalty for consistent terminology
            "presence_penalty": 0.0,  # No presence penalty for consistent structure
        },
    )
